var http          = require('http')
var execSh = require("exec-sh")
var port          = process.env.PORT || 10000;
var fs = require("fs");

var server = http.createServer(function(req, res) {
	res.writeHead(200);
	res.end('Hi everybody!');

});

var io   = require('socket.io')(server)
var connected = {};
io.on('connection', function(socket){



		console.log("Connected: ", socket.id);
    socket.emit("welcome", "start");
		
    socket.on("init_docker", function(data){
			console.log("Init Docker: ", data);
			connected[socket.id] = {};
			connected[socket.id]['id'] = data.docker_id;
			connected[socket.id]['time'] = data.time;
      //connected[socket.id]['socket'] = socket;
      console.log(connected);
			socket.emit("r_init_docker", "Successful");
      const self = this;
      this.send = function(){
//      console.log("socket",socket);
var id = socket.id;
           if(!connected[socket.id] || !connected[id]['id']){
          		return;
      		}
      		var tag = connected[id]['id'];
      		var timestamp = connected[id]['time'];
      		var add = timestamp != "0" && timestamp.length > 16?("--since "+timestamp):"--tail 100";
      		execSh('docker logs ' + tag + ' --timestamps '+add+' | head -n 500', true , function(err, response){
//console.log("started", err , response.length );
							var data = response.replace(/\r/g, "").split("\n");
                            //console.log("Variable Length = ", data.length);
                            var filtered = [];
                            var time = "";

                            for(var i = 0; i < data.length; i++){
                                var row = data[i];

                                if(i  == data.length - 2) {
                                    //console.log("..................." + row);
                                    time = row.match(/^[^\s]+/g)+"";
                                    //console.log("TIME==", time);
                                    time = time && time.length > 16 ? time : "";
                                    if(timestamp == time){
                                        time = "";
                                    }
                                    filtered.push(row.replace(/^[^\s]+/, "").substring(1));
                                    break;
                                }

                                if(i+ 2 > data.length )
                                    continue;


                                filtered.push(row.replace(/^[^\s]+/, "").substring(1));
                            };
                            var res = {status: true, data: filtered, time: time};

                            if(connected[id] && connected[id]['id'] && time){
                               	connected[id]['time'] = time; 
                                console.log(connected[id]['id']['socket']);
                                console.log("sending logs to server ("+id+" <"+connected[id]['id']+">) = ", res.data.length, res.data[res.data.length - 1]);
                     			      socket.emit("docker_logs", res);
                            }
                            setTimeout(self.send, 1000);
                                             
        }); //END OF EXECSH
      };//END OF send function
      
      setTimeout(this.send, 1000);
		});

		socket.on('start_docker', function(){
			if(!connected[socket.id]){
				socket.emit("r_start_docker", "Not connected yet");
				return;
			}

			execSh("docker restart " + connected[socket.id]['id'], { cwd: "/" }, function(err, data){
            	console.log("started", err, data);
            	socket.emit("r_start_docker", "Successful");
            });

		});

		socket.on('stop_docker', function(){
			if(!connected[socket.id]){
				socket.emit("r_stop_docker", "Not connected yet");
				return;
			}

			execSh("docker stop " + connected[socket.id]['id'], { cwd: "/" }, function(err, data){
            	console.log("started", err, data);
            	socket.emit("r_stop_docker", "Successful");
            });

		});

		socket.on('download', function (data) {
              //io.emit("hi",data+"last");
			  console.log("download request "+socket.id, new Date());
			  //console.log(data);
			  if(data.path){
			      var p = data.path + "/" + data.filename;
			      p = p.replace(/\\/g, "/");

				  fs.writeFile(p, data.content, function(err) {
						if(err){
							socket.emit("server_respond", "Error Updating: "+ err);
							return console.log(err);
						}

						console.log("The file was saved!");
						socket.emit("server_respond", "Updated");
				});
			  }
        });

        socket.on('disconnect', function(mz){
			delete connected[socket.id];
		  	console.log("disconnected", socket.id, mz);
   		 });
        
        function log_sender(){
       
      	for(var id in connected){
      		if(!connected[id] || !connected[id]['id']){
      			continue;
      		}
      		var tag = connected[id]['id'];
      		var timestamp = connected[id]['time'];
      		var add = timestamp != "0" && timestamp.length > 16?("--since "+timestamp):"--tail 100";
      
      		execSh('docker logs ' + tag + ' --timestamps '+add+' | head -n 500', true , function(err, response){

//console.log("started", err , response.length );

							var data = response.replace(/\r/g, "").split("\n");
                            //console.log("Variable Length = ", data.length);
                            var filtered = [];
                            var time = "";

                            for(var i = 0; i < data.length; i++){
                                var row = data[i];

                                if(i  == data.length - 2) {
                                    //console.log("..................." + row);
                                    time = row.match(/^[^\s]+/g)+"";
                                    //console.log("TIME==", time);
                                    time = time && time.length > 16 ? time : "";
                                    if(timestamp == time){
                                        time = "";
                                    }
                                    filtered.push(row.replace(/^[^\s]+/, "").substring(1));
                                    break;
                                }

                                if(i+ 2 > data.length )
                                    continue;


                                filtered.push(row.replace(/^[^\s]+/, "").substring(1));
                            };
                            var res = {status: true, data: filtered, time: time};

                            if(connected[id] && connected[id]['id'] && time){
                               	connected[id]['time'] = time; 
                                console.log(connected[id]['id']['socket']);
                                console.log("sending logs to server ("+id+" <"+connected[id]['id']+">) = ", res.data.length, res.data[res.data.length - 1]);
                     			      connected[id]['id']['socket'].emit("docker_logs", res);
                            }
        });
	}

	//setTimeout(log_sender,3000);

	}

//setTimeout(log_sender,2000);

});



  

console.log("Listening on port "+port);
server.listen(port);


